import json
from datetime import datetime as dt
from typing import Dict, List

# This file takes in a result log 
# generated by the controller and 
# converts each timestamp from milliseconds
# since the unix epoch to either a datetime obj
# or a human readable date string #

def convert_timestamp(time_int: int, human_format: bool):
    return dt.fromtimestamp(time_int / 1000).strftime("%Y-%m-%d %H:%M:%S.%f") if human_format else dt.fromtimestamp(time_int / 1000)


def link_parse(link: Dict, human_format: bool) -> Dict:
    link["actual_start_fin_time"]["first"] = convert_timestamp(
        time_int=link["actual_start_fin_time"]["first"], human_format=human_format)
    link["actual_start_fin_time"]["second"] = convert_timestamp(
        time_int=link["actual_start_fin_time"]["second"], human_format=human_format)
    link["start_fin_time"]["first"] = convert_timestamp(
        time_int=link["start_fin_time"]["first"], human_format=human_format)
    link["start_fin_time"]["second"] = convert_timestamp(
        time_int=link["start_fin_time"]["second"], human_format=human_format)
    return link


def task_parse(task: Dict, human_format: bool) -> Dict:
    task["estimated_start"] = convert_timestamp(
        time_int=task["estimated_start"], human_format=human_format)
    task["estimated_finish"] = convert_timestamp(
        time_int=task["estimated_finish"], human_format=human_format)
    task["actual_finish"] = convert_timestamp(
        time_int=task["actual_finish"], human_format=human_format)
    task["input_data"] = link_parse(
        link=task["input_data"], human_format=human_format)
    return task


def low_comp_allocation_parse(dnn_dict: Dict, human_format: bool) -> Dict:
    dnn_dict["deadline"] = convert_timestamp(
        time_int=dnn_dict["deadline"], human_format=human_format)
    dnn_dict["estimatedStart"] = convert_timestamp(
        time_int=dnn_dict["estimatedStart"], human_format=human_format)
    dnn_dict["estimatedFinish"] = convert_timestamp(
        time_int=dnn_dict["estimatedFinish"], human_format=human_format)
    dnn_dict["task"] = task_parse(
        task=dnn_dict["task"], human_format=human_format)
    return dnn_dict


def result_block_parse(res_block: Dict, human_format: bool) -> Dict:
    res_block["assembly_fin_time"] = convert_timestamp(
        time_int=res_block["assembly_fin_time"], human_format=human_format)
    res_block["assembly_start_time"] = convert_timestamp(
        time_int=res_block["assembly_start_time"], human_format=human_format)
    res_block["state_update_fin_time"] = convert_timestamp(
        time_int=res_block["state_update_fin_time"], human_format=human_format)
    res_block["state_update"] = link_parse(
        link=res_block["state_update"], human_format=human_format)

    for i in range(0, len(res_block["assembly_upload_windows"])):
        res_block["assembly_upload_windows"][i]["window"] = link_parse(
            link=res_block["assembly_upload_windows"][i]["window"], human_format=human_format)

    for i in range(0, len(res_block["partitioned_tasks"])):
        res_block["partitioned_tasks"][i]["task"] = task_parse(
            task=res_block["partitioned_tasks"][i]["task"], human_format=human_format)
    return res_block


def high_comp_parse(dnn: Dict, human_format: bool) -> Dict:
    dnn["deadline"] = convert_timestamp(
        time_int=dnn["deadline"], human_format=human_format)
    dnn["estimatedFinish"] = convert_timestamp(
        time_int=dnn["estimatedFinish"], human_format=human_format)
    dnn["estimatedStart"] = convert_timestamp(
        time_int=dnn["estimatedStart"], human_format=human_format)
    dnn["uploadData"] = link_parse(
        link=dnn["uploadData"], human_format=human_format)

    for task_key in dnn["tasks"].keys():
        dnn["tasks"][task_key] = result_block_parse(
            res_block=dnn["tasks"][task_key], human_format=human_format)

    return dnn


def result_format(json_array: List, human_format: bool) -> List:

    for event in json_array:
        event["time"] = convert_timestamp(
            time_int=event["time"], human_format=human_format)

        if event["event_type"] == "LOW_COMP_REQUEST":
            event["message_content"]["deadline"] = convert_timestamp(
                time_int=event["message_content"]["deadline"], human_format=human_format)
        elif event["event_type"] == "LOW_COMP_ALLOCATION_SUCCESS":
            event["message_content"]["dnn_details"] = low_comp_allocation_parse(
                dnn_dict=event["message_content"]["dnn_details"], human_format=human_format)
        elif event["event_type"] == 'OUTBOUND_LOW_COMP_ALLOCATION':
            event["message_content"]["comm_time"] = convert_timestamp(
                time_int=event["message_content"]["comm_time"] / 1000, human_format=human_format)
            event["message_content"]["dnn"] = low_comp_allocation_parse(
                dnn_dict=event["message_content"]["dnn"], human_format=human_format)
        elif event["event_type"] == 'HIGH_COMP_REQUEST':
            event["message_content"]["deadline"] = convert_timestamp(
                time_int=event["message_content"]["deadline"], human_format=human_format)
        elif event["event_type"] == "HIGH_COMP_ALLOCATION_SUCCESS":
            event["message_content"]["dnn"] = high_comp_parse(
                dnn=event["message_content"]["dnn"], human_format=human_format)
        elif event["event_type"] == 'OUTBOUND_TASK_ALLOCATION_HIGH':
            event["message_content"]["comm_time"] = convert_timestamp(
                time_int=event["message_content"]["comm_time"] / 1000, human_format=human_format)
            event["message_content"]["dnn"] = high_comp_parse(
                dnn=event["message_content"]["dnn"], human_format=human_format)
        elif event["event_type"] == 'STATE_UPDATE_REQUEST':
            for finish_time_key in event["message_content"]["finish_times"].keys():
                event["message_content"]["finish_times"][finish_time_key]["finish_time"] = convert_timestamp(
                    time_int=event["message_content"]["finish_times"][finish_time_key]["finish_time"], human_format=human_format)
                event["message_content"]["finish_times"][finish_time_key]["assembly_upload_start"] = convert_timestamp(
                    time_int=event["message_content"]["finish_times"][finish_time_key]["assembly_upload_start"], human_format=human_format)
                event["message_content"]["finish_times"][finish_time_key]["assembly_upload_finish"] = convert_timestamp(
                    time_int=event["message_content"]["finish_times"][finish_time_key]["assembly_upload_finish"], human_format=human_format)

        elif event["event_type"] == 'DAG_DISRUPTION_REQUEST':
            event["message_content"]["finish_time"] = convert_timestamp(
                time_int=event["message_content"]["finish_time"], human_format=human_format)

        elif event["event_type"] == 'OUTBOUND_STATE_UPDATE':
            event["message_content"]["comm_time"] = convert_timestamp(
                time_int=event["message_content"]["comm_time"] / 1000, human_format=human_format)

            event["message_content"]["dnn"] = high_comp_parse(
                dnn=event["message_content"]["dnn"], human_format=human_format)

        elif event["event_type"] == 'HIGH_COMP_FINISH':
            event["message_content"]["dnn_details"] = high_comp_parse(
                dnn=event["message_content"]["dnn_details"], human_format=human_format)

        elif event["event_type"] == 'OUTBOUND_PRUNE':
            event["message_content"]["comm_time"] = convert_timestamp(
                time_int=event["message_content"]["comm_time"] / 1000, human_format=human_format)

    return json_array
