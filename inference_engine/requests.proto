syntax = "proto3";

package inference;

enum RequestType {
    LOADREQUEST = 0;
    LOADRESPONSE = 1;
    PARTITIONREQUEST = 2;
    PARTITIONREPLY = 3;
    PROCESSREQUEST = 4;
    PROCESSREPLY = 5;
    ASSEMBLEREQUEST = 6;
    ASSEMBLEREPLY = 7;
}

message LoadRequest {
    //optional RequestType type = 1 [default = LOADREQUEST];
    string file = 2;
}

message LoadResponse {
    //optional RequestType type = 1 [default = LOADRESPONSE];
    string file = 2;
    bytes data = 3;
    repeated int32 shape = 4;
}

message PartitionSpecs {
    int32 N = 1;
    int32 M = 2;
    int32 x = 3;
    int32 y = 4;
}

message Partition {
    PartitionSpecs position = 1;
    bytes data = 2;
    repeated int32 shape = 3;
}

message PartitionRequest {
    //optional RequestType type = 1 [default = PARTITIONREQUEST];
    bytes data = 2;
    repeated int32 shape = 3;
    int32 convblockidx = 4;
    PartitionSpecs partitionSpecs = 5;
}

message PartitionResponse {
    //optional RequestType type = 1 [default = PARTITIONREPLY];
    repeated Partition tiles = 2;
}

message ProcessRequest {
    //optional RequestType type = 1 [default = PROCESSREQUEST];
    bytes data = 2;
    repeated int32 shape = 3;
    int32 convblockidx = 4;
    int32 core = 5;
}

message ProcessResponse {
    //optional RequestType type = 1 [default = PROCESSREPLY];
    bytes data = 2;
    repeated int32 shape = 3;
}

message AssembleRequest {
    //optional RequestType type = 1 [default = ASSEMBLEREQUEST];
    int32 convblockidx = 2;
    repeated Partition tiles = 3;
}

message AssembleResponse {
    //optional RequestType type = 1 [default = ASSEMBLEREPLY];
    bytes data = 2;
    repeated int32 shape = 3;
}

service InferenceAid {
    rpc LoadImage(LoadRequest) returns (LoadResponse);
    rpc PartitionData(PartitionRequest) returns (PartitionResponse);
    rpc AssembleData(AssembleRequest) returns (AssembleResponse);
}
service Inference {
    rpc ProcessData(ProcessRequest) returns (ProcessResponse);
}
